unit unt000_Desc;

{----------------------------------------------------------------------------

    Цель:
          Реализовать каркас на основе архитектуры MVC
          Model - View - Controler

    Теория:
      1.  Model (модель) является «сутью» объекта и отвечает за структуру,
          алгоритмы, расчёты и тому подобное внутреннее устройство объекта
      2.  View (представление) отвечает за отображение объекта, фактически это
          элементы пользовательского интерфейса то, что видит пользователь
      3.  Controller (контроллер) это связующее звено между «представлением» и
          «моделью» объекта. Контроллер получает данные от пользователя и
          передаёт их в «модель». Кроме того, он получает сообщения от модели,
          и передаёт их в «представление»
      4.  По идее модель данных лучше описать в виде коллекции типизированных
          классов, минус очень много ручного труда
          Заполнение коллекции реазизовать в виде отдельного класса,
          где будет скрыт источник данных Oracle, Access, XML и т.п.

    Допущения:
      0.  Максумум логиги на сервер, работаем через процедуры PL/SQL,
          основной плюс не надо тащить все данные на клиента
      1.  Так как в Delphi достаточно развито визуальное
          проектирование хотелось бы максимально использовать это
          свойство и сократить ручное написание кода
      2.  Работаем с БД Oracle плюс компоненты DOA
      4.  ....

    Решение:
      0.  Так как вся логика на сервере то не нужно реализовывать полноценную
          модель на клиенте 
      1.  Для простоты не делать типизированных коллекций, а использовать
          класс TDataSet.
          Таким образом коллекция это TDataSet, а элемент это TFields.
          Если важно типизирование, то лучше выбрать из 2х вариантов
            - Описать поля вручную в виде property's
            - DataSet'у сказать "Add all fields..." и работать через них
      2.  Model разбить на две части
              List   - содержит DataSet, основная цель указать запрос SQL и поля
              Action - основная цель описать вызов процедур PL/SQL
          Таким образом возможно, что будет две экранные формы, но с
          одинаковым вызовом PL/SQL процедур.
      3.  View выделить две части
            - Экранная форма отображения списка данных
            - Экранная форма редактирования одного элемента списка
      4.  Для общего случая в в экранной форме редактирования необходимо
          использовать не DB контролы. Так как мы используем в 99.99%
          стандартные контролы то имеет смысл в наше случае для упращения
          использовать DB контролы. 
      4.  Controller  выделять отдельно не будем, так как в Delphi есть
          достаточно удобный механизм DataSource для DB контролов и TAction для
          кнопок, меню и т.п.
          Контроллер будет единый для двух частей модели  Model.List и
          Model.Action.
          Соответственно получим возможность связать одну модель
          с несколькими представлениями.
          Для контроллера можем подставлять различные Model.List а форма
          редактирования ничего об этом знать не будет.

   ----------------------------------------------------------------------------}

interface

implementation

end.

