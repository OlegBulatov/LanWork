@using System.Web.Optimization;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>DERSA</title>
    <!--link rel="stylesheet" href="dist/themes/default/style.css" />-->
    <!--link rel="stylesheet" href="css/wordpress.css" type="text/css" media="screen" /-->
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <!--style-- type="text/css" media="screen">
        #page {
            background: url("images/draw/drawbg.jpg") repeat-y top;
            border: none;
        }
    </style-->
    <script type="text/javascript">
        var mxBasePath = '../../dist/mxgraphsrc';
    </script>

</head>
<body onload="createEditor('config/diagrameditor.xml');">
    <div>
        Имя пользователя: <strong><span style="color: green;">@ViewBag.Login</span></strong>
        @Html.ActionLink("     Выйти", "Logout", "Account")
    </div>
    <input id="displaytext" type="hidden" />
    <input id="DiagramId" type="hidden" />
    <!--
    <button id="find_button">Найти</button>
    <input id="searchtext" type="text" size="105" /> <br>
    <input id="found" type="text" size="10" value="0" />
    <input id="foundpath" type="text" size="80" />
    <button id="goto_button">Перейти</button>
    <button id="reset_button">Reset</button><br>
    <select id="listBox" multiple size="5"></select>
        -->
    <h1>DERSA modeller</h1><p>&copy; @DateTime.Now.Year</p>

    <div id="dersa" class="block1">
    </div>
    <div id="infoboard" class="block2">
    </div>

    <input type="checkbox" id="bnEdit" hidden><label id="laEdit"></label>
    <script>
        var Editor = null;
        infoControl = document.getElementById("infoboard");
        chEdit = document.getElementById("bnEdit");
        laEdit = document.getElementById("laEdit");
        chEdit.addEventListener("click", function () {
            if (!chEdit.checked) {
                infoControl.innerHTML = "";
                CancelEditDiagram();
            }
        });
    </script>

    @section Scripts {
        @Scripts.Render("~/bundles/jstree")
        @Scripts.Render("~/dist/dersatree.js")
        @Scripts.Render("~/dist/mxgraphsrc/js/mxClient.js")
    }
    <script type="text/javascript" src="js/app.js"></script>
    <script type="text/javascript">
        // Program starts here. The document.onLoad executes the
        // createEditor function with a given configuration.
        // In the config file, the mxEditor.onInit method is
        // overridden to invoke this global function as the
        // last step in the editor constructor.
        function onInit(editor) {
            Editor = editor;
            // Enables rotation handle
            mxVertexHandler.prototype.rotationEnabled = true;

            // Enables guides
            mxGraphHandler.prototype.guidesEnabled = true;

            // Alt disables guides
            mxGuide.prototype.isEnabledForEvent = function (evt) {
                return !mxEvent.isAltDown(evt);
            };

            // Enables snapping waypoints to terminals
            mxEdgeHandler.prototype.snapToTerminals = true;

            // Defines an icon for creating new connections in the connection handler.
            // This will automatically disable the highlighting of the source vertex.
            mxConnectionHandler.prototype.connectImage = new mxImage('images/connector.gif', 16, 16);

            // Enables connections in the graph and disables
            // reset of zoom and translate on root change
            // (ie. switch between XML and graphical mode).
            editor.graph.setConnectable(true);

            // Clones the source if new connection has no target
            editor.graph.connectionHandler.setCreateTarget(true);

            // Updates the title if the root changes
            var title = document.getElementById('title');

            if (title != null) {
                var f = function (sender) {
                    title.innerHTML = 'mxDraw - ' + sender.getTitle();
                };

                editor.addListener(mxEvent.ROOT, f);
                f(editor);
            }

            //// Changes the zoom on mouseWheel events
            //mxEvent.addMouseWheelListener(function (evt, up) {
            //    if (!mxEvent.isConsumed(evt)) {
            //        if (up) {
            //            editor.execute('zoomIn');
            //        }
            //        else {
            //            editor.execute('zoomOut');
            //        }

            //        mxEvent.consume(evt);
            //    }
            //});

            // Defines a new action to switch between
            // XML and graphical display
            var textNode = document.getElementById('xml');
            var graphNode = editor.graph.container;
            var sourceInput = document.getElementById('source');
            sourceInput.checked = false;


            var showSaved = function (editor, diaghtml) {
                //console.log('showSaved');
                var diagNode = document.getElementById('diagram');
                diagNode.innerHTML = diaghtml;
                diagNode.style.display = '';
                graphNode.style.display = 'none';
            }

            editor.addAction('showSavedDiagram', showSaved);

            var clearDiag = function (editor) {
                //console.log('clearDiag');
                var diagNode = document.getElementById('diagram');
                //diagNode.innerHTML = "";
                diagNode.style.display = 'none';
                graphNode.style.display = '';

                if (textNode.value != textNode.originalValue) {
                    var doc = mxUtils.parseXml("<mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/></root></mxGraphModel>");
                    var dec = new mxCodec(doc);
                    dec.decode(doc.documentElement, editor.graph.getModel());
                }

                textNode.originalValue = null;

                // Makes sure nothing is selected in IE
                if (mxClient.IS_IE) {
                    mxUtils.clearSelection();
                }

                textNode.style.display = 'none';

                // Moves the focus back to the graph
                editor.graph.container.focus();
            }

            editor.addAction('clearDiagram', clearDiag);

            var funct = function (editor) {
                if (sourceInput.checked) {
                    graphNode.style.display = 'none';
                    textNode.style.display = 'inline';

                    var enc = new mxCodec();
                    var node = enc.encode(editor.graph.getModel());

                    textNode.value = mxUtils.getPrettyXml(node);
                    textNode.originalValue = textNode.value;
                    textNode.focus();
                }
                else {
                    graphNode.style.display = '';

                    if (textNode.value != textNode.originalValue) {
                        var doc = mxUtils.parseXml(textNode.value);
                        var dec = new mxCodec(doc);
                        dec.decode(doc.documentElement, editor.graph.getModel());
                    }

                    textNode.originalValue = null;

                    // Makes sure nothing is selected in IE
                    if (mxClient.IS_IE) {
                        mxUtils.clearSelection();
                    }

                    textNode.style.display = 'none';

                    // Moves the focus back to the graph
                    editor.graph.container.focus();
                }
            };

            editor.addAction('switchView', funct);

            // Defines a new action to switch between
            // XML and graphical display
            mxEvent.addListener(sourceInput, 'click', function () {
                editor.execute('switchView');
            });

            var insNode = function(editor, id, text, x, y)
            {
                editor.graph.getModel().beginUpdate();
                try {
                    var v1 = editor.graph.insertVertex(null, id, text, x, y, 120, 25);
                    v1.label = text;
                }
                finally {
                    editor.graph.getModel().endUpdate();
                }
            }

            editor.addAction('insertNode', insNode);

            var initGraph = function (editor, xml)
            {
                editor.graph.getModel().beginUpdate();
                try {
                    var doc = mxUtils.parseXml(xml);
                    var codec = new mxCodec(doc);
                    codec.decode(doc.documentElement, editor.graph.getModel());
                }
                finally {
                    editor.graph.getModel().endUpdate();
                }
            }

            editor.addAction('initG', initGraph);

            // Create select actions in page
            //var node = document.getElementById('mainActions');
            //var buttons = ['group', 'ungroup', 'cut', 'copy', 'paste', 'delete', 'undo', 'redo', 'print', 'show'];


            //for (var i = 0; i < buttons.length; i++) {
            //    var button = document.createElement('button');
            //    mxUtils.write(button, mxResources.get(buttons[i]));

            //    var factory = function (name) {
            //        return function () {
            //            editor.execute(name);
            //        };
            //    };

            //    mxEvent.addListener(button, 'click', factory(buttons[i]));
            //    node.appendChild(button);
            //}

            //// Create select actions in page
            //var node = document.getElementById('selectActions');
            //mxUtils.write(node, 'Select: ');
            //mxUtils.linkAction(node, 'All', editor, 'selectAll');
            //mxUtils.write(node, ', ');
            //mxUtils.linkAction(node, 'None', editor, 'selectNone');
            //mxUtils.write(node, ', ');
            //mxUtils.linkAction(node, 'Vertices', editor, 'selectVertices');
            //mxUtils.write(node, ', ');
            //mxUtils.linkAction(node, 'Edges', editor, 'selectEdges');

            //// Create select actions in page
            //var node = document.getElementById('zoomActions');
            //mxUtils.write(node, 'Zoom: ');
            //mxUtils.linkAction(node, 'In', editor, 'zoomIn');
            //mxUtils.write(node, ', ');
            //mxUtils.linkAction(node, 'Out', editor, 'zoomOut');
            //mxUtils.write(node, ', ');
            //mxUtils.linkAction(node, 'Actual', editor, 'actualSize');
            //mxUtils.write(node, ', ');
            //mxUtils.linkAction(node, 'Fit', editor, 'fit');
        }

        //window.onbeforeunload = function () { return mxResources.get('changesLost'); };
    </script>

    <div id="page">
        <!--div-- id="header">
            <div id="headerimg" style="overflow:hidden;">
                <h1 id="title">mxDraw</h1>
            </div>
        </div-->
        <!--div-- id="mainActions"
             style="width:100%;padding-top:8px;padding-left:24px;padding-bottom:8px;">
        </div-->
        <!--div-- id="selectActions" style="width:100%;padding-left:54px;padding-bottom:4px;">
        </div-->
        <table border="0" width="730px">
            <tr>
                <td id="toolbar" style="width:16px;padding-left:20px;" valign="top">
                    <!-- Toolbar Here -->
                </td>
                <td valign="top" style="border-width:1px;border-style:solid;border-color:black;">
                    <div id="graph" tabindex="-1" style="position:relative;height:480px;width:684px;overflow:hidden;cursor:default;">
                    </div>
                    <div id="diagram" tabindex="-1" style="position:relative;height:480px;width:684px;display:none;overflow:hidden;cursor:default;">
                    </div>
                    <textarea id="xml" style="height:480px;width:684px;display:none;border-style:none;"></textarea>
                </td>
            </tr>
        </table>
        <span style="float:right;padding-right:36px;">
            <input id="source" type="checkbox" />Source
        </span>
        <div id="zoomActions" style="width:100%;padding-left:54px;padding-top:4px;">
        </div>
        <!--div-- id="footer">
            <p id="status">
                Loading...
            </p>
            <br />
        </div-->
    </div>
</body>
</html>

