@using System.Web.Optimization;
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="utf-8" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width" />
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />
    @Styles.Render("https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css")
    @Styles.Render("~/guriddo/css/trirand/ui.jqgrid-bootstrap.css")
    @Styles.Render("~/jqwidgets/styles/jqx.base.css")
    @Styles.Render("~/Content/jquery-ui.css")
    

</head>
<body onload="InitModuleTree();">

    <script>

        var objFilter = null;
        var objEdit = null;
        var currentClass = 'some_class';
        var gridName = '#grid';
        var dataAdapter;
        var totalRecordsCount;
        var editModels = {
            FORM: [
                { class: 'textbox', caption: 'Type Name', data_field: 'type_name', control_value: 'v1', id: 'e1', app_index: 0, left: 20, top: 20, width: 350, height: 25, is_selected: false, is_visible: true },
                { class: 'textbox', caption: null, data_field: 'wpf_type_name', control_value: '', id: 'e2', app_index: 1, left: 20, top: 70, width: 350, height: 25, is_selected: false, is_visible: true },
                {
                    class: 'combobox', caption: 'entity3', data_field: 'form_type', control_value: 't2', id: 'e3', app_index: 2, left: 400, top: 20, width: 160, height: 25, is_selected: false, is_visible: true,
                    options: [{ value: "1", text: "Browse" }, { value: "2", text: "Fiter" }, { value: "3", text: "Edit" }]
                }],
            OBJECT_TYPE: [
                { class: 'textbox', caption: 'Type Name', data_field: 'type_name', control_value: 'v1', id: 'e1', app_index: 0, left: 20, top: 20, width: 350, height: 25, is_selected: false, is_visible: true },
                { class: 'textbox', caption: 'Class Name', data_field: 'class_name', control_value: '', id: 'e2', app_index: 1, left: 20, top: 70, width: 300, height: 25, is_selected: false, is_visible: true },
            ]
        };

        var rendergridrows = function (params) {
            var xhr = new XMLHttpRequest();
            var sortColumn = currentClass;
            if (SortState[currentClass]) {
                sortColumn = SortState[currentClass].sortcolumn;
                if (SortState[currentClass].sortdirection.descending)
                    sortColumn += ' desc';
            }
            xhr.open('GET', '/Object/List?class_name=' + currentClass + '&order=' + sortColumn + '&limit=10&offset=' + params.startindex, false);

            xhr.send();
            var data = JSON.parse(xhr.responseText);
            return JSON.parse(data.response_body);
        }
        //var totalcolumnrenderer = function (row, column, cellvalue) {
        //        var cellvalue = $.jqx.dataFormat.formatnumber(cellvalue, 'c2');
        //        return '<span style="margin: 6px 3px; font-size: 12px; float: right; font-weight: bold;">' + cellvalue + '</span>';
        //}

        var SortState = new Object();
        var LoadedState = new Object();
        var ColumnModels = new Object();

        function InitModuleTree() {

            $('#filterForm').filterForm();

            var layout =
                [
                    {
                        type: 'layoutGroup',
                        orientation: 'horizontal',
                        items:
                            [
                                {
                                    type: 'tabbedGroup',
                                    width: '20%',
                                    minWidth: 200,
                                    items:
                                        [
                                            {
                                                type: 'layoutPanel',
                                                title: 'Solution Explorer',
                                                contentContainer: 'SolutionExplorerPanel',
                                                initContent: function () {
                                                    var $tree = $('#solutionExplorerTree');

                                                    $tree.jstree({
                                                        'core': {
                                                            "check_callback": true,
                                                            'data': {
                                                                'multiple': false,
                                                                "url": "/demotree.json",
                                                                "dataType": "json",
                                                                "data": function (node) {
                                                                    return { "id": node.id };
                                                                }
                                                            }
                                                        },
                                                        'plugins': ["state", "contextmenu"]
                                                    });

                                                    $tree.on("changed.jstree", function (e, data) {
                                                        if (data.selected.length) {
                                                            selected = data.instance.get_node(data.selected[0]);
                                                            //LoadFancyGrid(selected.data);
                                                            loadJqxGrid(selected.data);
                                                        }
                                                    });

                                                }
                                            },
                                            {
                                                type: 'layoutPanel',
                                                title: 'Help',
                                                contentContainer: 'HelpPanel'
                                            }
                                        ]
                                },
                                {
                                    type: 'layoutGroup',
                                    orientation: 'vertical',
                                    width: '80%',
                                    items: [{
                                        type: 'documentGroup',
                                        height: '10%',
                                        minHeight: 500,
                                        items: [{
                                            type: 'documentPanel',
                                            title: 'Document 0',
                                            contentContainer: 'Document0Panel'
                                        }]
                                    }, {
                                        type: 'documentGroup',
                                        height: '60%',
                                        minHeight: 200,
                                        items: [{
                                            type: 'documentPanel',
                                            title: 'Data grid',
                                            contentContainer: 'Document1Panel'
                                        }/*, {
                                                                                                        type: 'documentPanel',
                                                                                                        title: 'Document 2',
                                                                                                        contentContainer: 'Document2Panel'
                                                                                                    }*/]
                                    }, {
                                        type: 'tabbedGroup',
                                        height: '30%',
                                        pinnedHeight: 30,
                                        allowClose: true,
                                        items: [{
                                            type: 'layoutPanel',
                                            title: 'Error List',
                                            contentContainer: 'ErrorListPanel'
                                        }, {
                                            type: 'layoutPanel',
                                            title: 'Details',
                                            contentContainer: 'DetailsPanel',
                                            selected: true
                                        }]
                                    }]
                                }
                            ]
                    }
                ];
            $('#jqxLayout').jqxLayout({ width: 1500/*getWidth('layout')*/, height: 900, layout: layout });

        }

        function loadJqxGrid(className) {
            function getColumnType(typeName) {
                switch (typeName) {
                    case 'DIOS.Common.SqlBoolean':
                        return 'checkbox';
                    case 'LongText':
                        return 'template';
                    return 'textbox';
                }
            }
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/Object/List?class_name=' + className + '&limit=0&offset=0', false);
            xhr.send();
            var data = JSON.parse(xhr.responseText);
            totalRecordsCount = data.row_count;
            xhr = new XMLHttpRequest();
            xhr.open('GET', '/Object/ColumnsList?class_name=' + className, false);
            xhr.send();
            data = JSON.parse(xhr.responseText);
            ColumnModels[className] = new Array();
            var columnsInfo = JSON.parse(data.response_body);
            if (columnsInfo && columnsInfo.length)
                columnsInfo.forEach(function (item, i) {
                    ColumnModels[className][i] =
                    {
                        text: item.DisplayName,
                        datafield: item.Name,
                        width: 80,
                        columntype: getColumnType(item.TypeName),
                        createeditor: function (row, cellvalue, editor) {
                            // assign a new data source to the combobox.
                            //editor.jqxDropDownList({ autoDropDownHeight: true, source: ['Stuttgart', 'Rio de Janeiro', 'Strasbourg']});
                            var btn = $('<div>', {
                                id: 'editButton'
                            }).jqxButton({ theme: theme, height: 20, width: 20 }).on('click', function () { $('#window').jqxWindow('open'); });
                            btn.appendTo(editor);
                            $('#window').jqxWindow({
                                    autoOpen: false, width: 500, position: 'bottom, left', height: 400, maxWidth: 800, resizable: false,
                                    initContent: function () {
                                    // create editor.
                                        var ed = $('<textarea>');
                                        ed.attr('id', 'texteditor');
                                        ed.width('100%');
                                        ed.height(350);
                                        ed.click(function (event) {
                                            console.log(event);
                                            event.stopPropagation();
                                        });
                                        ed.val(cellvalue);
                                        ed.appendTo($('#editor'));
                                    //$("#editor").jqxEditor({ tools: 'bold italic underline font size', width: '100%', height: '100%' }).val(cellvalue);
                                }
                            });
                            //$("#openButton").click(function () {
                            //    $('#window').jqxWindow('open');
                            //});
                        },
                        initeditor: function (row, cellvalue, editor, celltext, pressedChar) {
                            //$("#editor").jqxEditor('val', cellvalue); 
                            $('#texteditor').val(cellvalue);
                        },
                        geteditorvalue: function (row, cellvalue, editor) {
                            // return the editor's value.
                            //return $("#editor").jqxEditor('val');//editor.value; //editor.find('input').val();
                            return document.getElementById("texteditor").value;
                        },
                        cellvaluechanging: function (row, column, columntype, oldvalue, newvalue) {
                            // return the old value, if the new value is empty.
                            //console.log(newvalue);
                            //if (newvalue == "") return oldvalue;
                        }
                    };
                });
            //[
            //    { text: 'Id', datafield: 'object_type', width: 40 },
            //    { text: 'Name', datafield: 'name', width: 120 },
            //    { text: 'Type', datafield: 'type_name', width: 120 },
            //    { text: 'Class Name', datafield: 'class_name', width: 180 }
            //];
            var source =
            {
                datatype: "array",
                localdata: {},
                totalrecords: totalRecordsCount
            };
            // load data.

            currentClass = className;
            gridName = "#" + className;
            let gridContainer = $('#grid_container');//document.getElementById('grid_container');
            gridContainer.empty()
            $('<div>', {
                id: className
            }).appendTo(gridContainer);
            //if (gridContainer.lastChild)
            //    gridContainer.removeChild(gridContainer.lastChild);
            //let gridDiv = document.createElement('div');
            //gridDiv.id = className;
            //gridContainer.appendChild(gridDiv);

            $(gridName).jqxGrid(
                {
                    width: getWidth('Grid'),
                    autoheight: true,
                    source: new $.jqx.dataAdapter(source),
                    sortable: true,
                    columnsresize: true,
                    columnsreorder: true,
                    virtualmode: true,
                    pageable: true,
                    editable: true,
                    editmode: 'dblclick',
                    rendergridrows: rendergridrows,
                    showtoolbar: true,
                    rendertoolbar: function (statusbar) {
                        // appends buttons to the status bar.
                        var container = $("<div style='overflow: hidden; position: relative; margin: 5px;'></div>");
                        var tuneButton = $("<div style='float: left; margin-left: 5px;'><img style='position: relative; margin-top: 2px;' src='/images/property.gif'/><span style='margin-left: 4px; position: relative; top: -3px;'>Tune</span></div>");
                        var reloadButton = $("<div style='float: left; margin-left: 5px;'><img style='position: relative; margin-top: 2px;' src='/images/refresh.gif'/><span style='margin-left: 4px; position: relative; top: -3px;'>Reload</span></div>");
                        var saveStateButton = $("<div style='float: left; margin-left: 5px;'><img style='position: relative; margin-top: 2px;' src='/images/save.gif'/><span style='margin-left: 4px; position: relative; top: -3px;'>Save</span></div>");
                        //                        var loadStateButton = $("<div style='float: left; margin-left: 5px;'><img style='position: relative; margin-top: 2px;' src='/images/refresh.gif'/><span style='margin-left: 4px; position: relative; top: -3px;'>Load</span></div>");
                        container.append(tuneButton);
                        container.append(reloadButton);
                        container.append(saveStateButton);
                        statusbar.append(container);
                        tuneButton.jqxButton({ theme: theme });
                        reloadButton.jqxButton({ theme: theme });
                        saveStateButton.jqxButton({ theme: theme });
                        //                        loadStateButton.jqxButton({ theme: theme });

                        var isTuning;
                        var tuneDiv;
                        //var state = null;
                        tuneButton.click(function (event) {
                            if (isTuning) {
                                isTuning = false;
                                tuneDiv.hide();
                                return;
                            }
                            isTuning = true;
                            tuneDiv = $("<div>");
                            //tuneDiv.width(200);
                            //tuneDiv.height(400);
                            tuneDiv.css({
                                "position": "absolute",
                                "top": statusbar.offset().top + 40,
                                "left": statusbar.offset().left,
                                "z-index": "35",
                                "background-color": "white",
                                "border": "2px solid blue"
                            });
                            //var okButton = $("<div style='position: absolute; margin-left: 5px; bottom: 2px;'><img style='position: relative; margin-top: 2px;' src='/images/save.gif'/><span style='margin-left: 4px; position: relative; top: -3px;'>Save</span></div>");
                            //okButton.jqxButton({ width: 65, height: 20 });
                            //okButton.click(function (event) {
                            //    tuneDiv.hide();
                            //});
                            //tuneDiv.append(okButton);
                            var listSource = new Array();
                            var gridColumns = $(gridName).jqxGrid('columns').records;
                            gridColumns.forEach(function (item, i) {
                                listSource[i] = { label: item.text, value: item.datafield, checked: !item.hidden };
                            });
                            tuneDiv.jqxListBox({ source: listSource, width: 200, height: 200, checkboxes: true });
                            tuneDiv.on('checkChange', function (event) {
                                event.stopPropagation();
                                $(gridName).jqxGrid('beginupdate');
                                if (event.args.checked) {
                                    $(gridName).jqxGrid('showcolumn', event.args.value);
                                }
                                else {
                                    $(gridName).jqxGrid('hidecolumn', event.args.value);
                                }
                                $(gridName).jqxGrid('endupdate');
                            });

                            //$(gridName).append(tuneDiv);
                            $("body").append(tuneDiv);
                        });
                        // reload grid data.
                        reloadButton.click(function (event) {
                            $(gridName).jqxGrid('gotopage', 0);
                            $(gridName).jqxGrid({ source: getAdapter() });
                        });
                        saveStateButton.click(function () {
                            // save the current state of jqxGrid.
                            $(gridName).jqxGrid('savestate');
                        });
                        //loadStateButton.click(function () {
                        //// load the Grid's state.
                        //    if (state) {
                        //        $(gridName).jqxGrid('loadstate', state);
                        //    }
                        //    else {
                        //        $(gridName).jqxGrid('loadstate');
                        //    }
                        //});
                    },
                    columns: ColumnModels[className]
                });

            $(gridName).jqxGrid({ pagermode: "simple" });

            //if (!LoadedState[className]) {
            $(gridName).jqxGrid('loadstate');
            //    LoadedState[className] = true;
            //}

            $(gridName).on('cellendedit', function (event) {
                var body = new Object();
                body.class_name = className;
                body.json_object = JSON.stringify({id: event.args.row.form, content_json: event.args.value});
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '/Object/Update', false);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.send(JSON.stringify(body));
            });
            $(gridName).on("sort", function (event) {
                SortState[className] = event.args.sortinformation;
                if (event.owner.dataview.pagenum == 0)
                    $(gridName).jqxGrid({ source: getAdapter() });
                else {
                    $(gridName).jqxGrid('gotoprevpage');
                    $(gridName).jqxGrid('gotonextpage');
                }
            });
            $(gridName).on('rowselect', function (event) {
                objEdit.SetObj(event.args.row);
            });

            if (!objFilter)
                initFilter();

            //if (!objEdit)
            var editModel = "";
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/Object/GetEditModel?class_name=' + currentClass, false);

            xhr.send();
            var data = JSON.parse(xhr.responseText);
            console.log(JSON.stringify(editModels[className]));
            editModel = JSON.parse(data.response_body);
//            initEdit(editModels[className]);
            initEdit(editModel);
        }

        var getAdapter = function () {
            var source =
            {
                datatype: "array",
                localdata: {},
                updaterow: function (rowid, rowdata, commit) {
                    // synchronize with the server - send update command
                    // call commit with parameter true if the synchronization with the server is successful
                    // and with parameter false if the synchronization failder.
                    //commit(true);
                },
                totalrecords: totalRecordsCount
            };

            var dataAdapter = new $.jqx.dataAdapter(source);
            return dataAdapter;
        }


    </script>


    <script src="/dist/vue.js"></script>

    <style>
        .f-form {
            background: #e8e8e8;
            width: 600px;
            height: 100%;
        }
    </style>


    <div id="jqxLayout">
        <!--The panel content divs can have a flat structure-->
        <!--autoHideGroup-->
        <div data-container="ToolboxPanel">
            List of tools
        </div>
        <div data-container="HelpPanel">
            Help topics
            <button onclick="alert(objFilter.GetFilter())">Get filter</button>
            <input type="button" id="saveState" value="Save State" />
            <input type="button" id="loadState" value="Load State" />
            <button onclick="objEdit.SetObj({type_name:'MMM', created_at: 'rrg', f3: 't3'})">Test edit</button>
            <div style="margin-top: 20px" id="jqxlistbox"></div>

            <!--button onclick="var p = document.getElementById('filterContainer').appendChild(document.getElementById('filterForm'))">Go</button-->

        </div>
        <!--documentGroup-->
        <div data-container="Document0Panel">
            <div id="filterForm" class="f-form">
            </div>
        </div>
        <div data-container="Document1Panel">
            <div id="grid_container" style="width: 500px;"></div>
            <!--div style="margin-top: 30px;">
                <div style="float: left;">
                    Pager Settings:
                    <div id="modes">
                    </div>
                </div>
            </div-->
        </div>
        <div data-container="Document2Panel">
            Document 2 content
        </div>
        <!--bottom tabbedGroup-->
        <div data-container="ErrorListPanel">
            <div id="window">
                <div>
                    jqxEditor
                </div>
                <div>
                    <div id="editor"></div>
                </div>
            </div>
        </div>
        <div data-container="DetailsPanel">
            <!--div id="form" style="position:absolute; left:0px; top: 0px; margin-left: 10px;"></div-->
            <div id="editForm" class="f-form">
            </div>

        </div>
        <!--right tabbedGroup-->
        <div data-container="SolutionExplorerPanel">
            <div id="solutionExplorerTree" style="border: none;">
            </div>
        </div>
        <div data-container="PropertiesPanel">
            List of properties
        </div>
    </div>


    @section Scripts {
        @Scripts.Render("~/dist/jstree.js")
        @Scripts.Render("~/dist/lantree.js")
        @Scripts.Render("~/dist/vue_filter.js")
        @Scripts.Render("~/dist/vue_edit.js")
        @Scripts.Render("~/jqwidgets/jqxcore.js")
        @Scripts.Render("~/jqwidgets/jqxribbon.js")
        @Scripts.Render("~/jqwidgets/jqxlayout.js")
        @Scripts.Render("~/jqwidgets/jqxdata.js")
        @Scripts.Render("~/jqwidgets/jqxbuttons.js")
        @Scripts.Render("~/jqwidgets/jqxscrollbar.js")
        @Scripts.Render("~/jqwidgets/jqxlistbox.js")
        @Scripts.Render("~/jqwidgets/jqxdropdownlist.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.pager.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.edit.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.selection.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.columnsresize.js")
        @Scripts.Render("~/jqwidgets/jqxmenu.js")
        @Scripts.Render("~/scripts/demos.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.sort.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.filter.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.storage.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.columnsreorder.js")
        @Scripts.Render("~/jqwidgets/jqxpanel.js")
        @Scripts.Render("~/jqwidgets/jqxcheckbox.js")
        @Scripts.Render("~/jqwidgets/jqxwindow.js")
        @Scripts.Render("~/jqwidgets/jqxscrollbar.js")
        @Scripts.Render("~/jqwidgets/jqxeditor.js")

    }

</body>
</html>