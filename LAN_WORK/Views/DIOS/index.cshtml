@using System.Web.Optimization;
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="utf-8" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width" />
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />
    @Styles.Render("https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css")
    @Styles.Render("~/guriddo/css/trirand/ui.jqgrid-bootstrap.css")
    @Styles.Render("~/jqwidgets/styles/jqx.base.css")
    @Styles.Render("~/Content/jquery-ui.css")
    

</head>
<body onload="InitModuleTree();">

    <script>
        var objFilter = null;
        var currentClass = 'some_class';
        var gridName = '#grid';
        var dataAdapter;
        var totalRecordsCount;
        var rendergridrows = function (params) {
            var xhr = new XMLHttpRequest();
            var sortColumn = currentClass;
            if (SortState[currentClass]) {
                sortColumn = SortState[currentClass].sortcolumn;
                if (SortState[currentClass].sortdirection.descending)
                    sortColumn += ' desc';
            }
            xhr.open('GET', '/Object/List?class_name=' + currentClass + '&order=' + sortColumn + '&limit=10&offset=' + params.startindex, false);

            xhr.send();
            var data = JSON.parse(xhr.responseText);
            return JSON.parse(data.response_body);
        }
        //var totalcolumnrenderer = function (row, column, cellvalue) {
        //        var cellvalue = $.jqx.dataFormat.formatnumber(cellvalue, 'c2');
        //        return '<span style="margin: 6px 3px; font-size: 12px; float: right; font-weight: bold;">' + cellvalue + '</span>';
        //}

        var SortState = new Object();
        var LoadedState = new Object();
        var ColumnModels = new Object();
        ColumnModels.OBJECT_TYPE = [
            { text: 'Id', datafield: 'object_type', width: 40 },
            { text: 'Name', datafield: 'name', width: 120 },
            { text: 'Type', datafield: 'type_name', width: 120 },
            { text: 'Class Name', datafield: 'class_name', width: 180 }
        ];
        ColumnModels.MODULE = [
            { text: 'Id', datafield: 'module', width: 40 },
            { text: 'Name', datafield: 'title', width: 120 },
            { text: 'Type', datafield: 'form_type_name', width: 120 }
        ];
        ColumnModels.FORM = [
            { text: 'Id', datafield: 'form', width: 40 },
            { text: 'Name', datafield: 'type_name', width: 120 }
        ];
        ColumnModels.LNT_SERVER = [
            { text: 'Id', datafield: 'lnt_server', width: 40 },
            { text: 'Name', datafield: 'name', width: 120 },
            { text: 'IP address', datafield: 'ip_address', width: 120 }
        ];


        function InitModuleTree() {

            $('#filterForm').filterForm();

            var layout =
                [
                    {
                        type: 'layoutGroup',
                        orientation: 'horizontal',
                        items:
                            [
                                {
                                    type: 'tabbedGroup',
                                    width: '20%',
                                    minWidth: 200,
                                    items:
                                        [
                                            {
                                                type: 'layoutPanel',
                                                title: 'Solution Explorer',
                                                contentContainer: 'SolutionExplorerPanel',
                                                initContent: function () {
                                                    var $tree = $('#solutionExplorerTree');

                                                    $tree.jstree({
                                                        'core': {
                                                            "check_callback": true,
                                                            'data': {
                                                                'multiple': false,
                                                                "url": "/demotree.json",
                                                                "dataType": "json",
                                                                "data": function (node) {
                                                                    return { "id": node.id };
                                                                }
                                                            }
                                                        },
                                                        'plugins': ["state", "contextmenu"]
                                                    });

                                                    $tree.on("changed.jstree", function (e, data) {
                                                        if (data.selected.length) {
                                                            selected = data.instance.get_node(data.selected[0]);
                                                            //LoadFancyGrid(selected.data);
                                                            loadJqxGrid(selected.data);
                                                            if (!objFilter)
                                                                initFilter();
                                                        }
                                                    });

                                                }
                                            },
                                            {
                                                type: 'layoutPanel',
                                                title: 'Help',
                                                contentContainer: 'HelpPanel'
                                            }
                                        ]
                                },
                                {
                                    type: 'layoutGroup',
                                    orientation: 'vertical',
                                    width: '80%',
                                    items: [{
                                        type: 'documentGroup',
                                        height: '10%',
                                        minHeight: 500,
                                        items: [{
                                            type: 'documentPanel',
                                            title: 'Document 0',
                                            contentContainer: 'Document0Panel'
                                        }]
                                    }, {
                                        type: 'documentGroup',
                                        height: '60%',
                                        minHeight: 200,
                                        items: [{
                                            type: 'documentPanel',
                                            title: 'Data grid',
                                            contentContainer: 'Document1Panel'
                                        }/*, {
                                                                                        type: 'documentPanel',
                                                                                        title: 'Document 2',
                                                                                        contentContainer: 'Document2Panel'
                                                                                    }*/]
                                    }, {
                                        type: 'tabbedGroup',
                                        height: '30%',
                                        pinnedHeight: 30,
                                        allowClose: true,
                                        items: [{
                                            type: 'layoutPanel',
                                            title: 'Error List',
                                            contentContainer: 'ErrorListPanel'
                                        }, {
                                            type: 'layoutPanel',
                                            title: 'Details',
                                            contentContainer: 'DetailsPanel',
                                            selected: true
                                        }]
                                    }]
                                }
                            ]
                    }
                ];
            $('#jqxLayout').jqxLayout({ width: 1500/*getWidth('layout')*/, height: 900, layout: layout });

            $("#saveState").jqxButton({ theme: theme });
            $("#loadState").jqxButton({ theme: theme });
            var state = null;
            $("#saveState").click(function () {
                // save the current state of jqxGrid.
                state = $(gridName).jqxGrid('savestate');
            })
                ;
            $("#loadState").click(function () {
                // load the Grid's state.
                if (state) {
                    $(gridName).jqxGrid('loadstate', state);
                }
                else {
                    $(gridName).jqxGrid('loadstate');
                }
            });

            var listSource = [
                { label: 'Name', value: 'name', checked: false },
                { label: 'Type', value: 'type_name', checked: true },
                { label: 'form', value: 'form', checked: true },
                { label: 'module', value: 'module', checked: true },
                { label: 'Class name', value: 'class_name', checked: true }];
            $("#jqxlistbox").jqxListBox({ source: listSource, width: 200, height: 200, checkboxes: true });
            $("#jqxlistbox").on('checkChange', function (event) {
                $(gridName).jqxGrid('beginupdate');
                if (event.args.checked) {
                    $(gridName).jqxGrid('showcolumn', event.args.value);
                }
                else {
                    $(gridName).jqxGrid('hidecolumn', event.args.value);
                }
                $(gridName).jqxGrid('endupdate');
            });
            //$("#modes").jqxDropDownList({ width: 150, autoDropDownHeight: true, selectedIndex: 1, height: 25, source: ['Default', 'Simple'] });
            //$("#modes").on('select', function (event) {
            //    if (event.args.index === 0) {
            //        $(gridName).jqxGrid({ pagermode: 'default' });
            //    }
            //    else {
            //        $(gridName).jqxGrid({ pagermode: 'simple' });
            //    }
            //});
        }

        function loadJqxGrid(className) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/Object/List?class_name=' + className + '&limit=0&offset=0', false);
            xhr.send();
            var data = JSON.parse(xhr.responseText);
            totalRecordsCount = data.row_count;
            var source =
            {
                datatype: "array",
                localdata: {},
                totalrecords: totalRecordsCount
            };
            // load data.

            currentClass = className;
            gridName = "#" + className;
            let gridContainer = document.getElementById('grid_container');
            if (gridContainer.lastChild)
                gridContainer.removeChild(gridContainer.lastChild);
            let gridDiv = document.createElement('div');
            gridDiv.id = className;
            gridContainer.appendChild(gridDiv);

            $(gridName).jqxGrid(
                {
                    width: getWidth('Grid'),
                    autoheight: true,
                    source: new $.jqx.dataAdapter(source),
                    sortable: true,
                    columnsresize: true,
                    columnsreorder: true,
                    virtualmode: true,
                    pageable: true,
                    rendergridrows: rendergridrows,
                    showtoolbar: true,
                    rendertoolbar: function (statusbar) {
                        // appends buttons to the status bar.
                        var container = $("<div style='overflow: hidden; position: relative; margin: 5px;'></div>");
                        var deleteButton = $("<div style='float: left; margin-left: 5px;'><img style='position: relative; margin-top: 2px;' src='/images/property.gif'/><span style='margin-left: 4px; position: relative; top: -3px;'>Tune</span></div>");
                        var reloadButton = $("<div style='float: left; margin-left: 5px;'><img style='position: relative; margin-top: 2px;' src='/images/refresh.gif'/><span style='margin-left: 4px; position: relative; top: -3px;'>Reload</span></div>");
                        container.append(deleteButton);
                        container.append(reloadButton);
                        statusbar.append(container);
                        deleteButton.jqxButton({ width: 65, height: 20 });
                        reloadButton.jqxButton({ width: 65, height: 20 });
                        // delete selected row.
                        deleteButton.click(function (event) {
                            console.log(event);
                        });
                        // reload grid data.
                        reloadButton.click(function (event) {
                            $(gridName).jqxGrid('gotopage', 0);
                            $(gridName).jqxGrid({ source: getAdapter() });
                        });
                    },
                    columns: ColumnModels[className]
                });

            $(gridName).jqxGrid({ pagermode: "simple" });

            if (!LoadedState[className]) {
                $(gridName).jqxGrid('loadstate');
                LoadedState[className] = true;
            }

            $(gridName).on("sort", function (event) {
                console.log(event);
                SortState[className] = event.args.sortinformation;
                if (event.owner.dataview.pagenum == 0)
                    $(gridName).jqxGrid({ source: getAdapter() });
                else {
                    $(gridName).jqxGrid('gotoprevpage');
                    $(gridName).jqxGrid('gotonextpage');
                }
            });

        }

        var getAdapter = function () {
            var source =
            {
                datatype: "array",
                localdata: {},
                totalrecords: totalRecordsCount
            };

            var dataAdapter = new $.jqx.dataAdapter(source);
            return dataAdapter;
        }


    </script>


    <script src="/dist/vue.js"></script>

    <style>
        .f-form {
            background: #e8e8e8;
            width: 600px;
            height: 100%;
        }
    </style>


    <div id="jqxLayout">
        <!--The panel content divs can have a flat structure-->
        <!--autoHideGroup-->
        <div data-container="ToolboxPanel">
            List of tools
        </div>
        <div data-container="HelpPanel">
            Help topics
            <button onclick="alert(objFilter.GetFilter())">Get filter</button>
            <input type="button" id="saveState" value="Save State" />
            <input type="button" id="loadState" value="Load State" />
            <div style="margin-top: 20px" id="jqxlistbox"></div>

            <!--button onclick="var p = document.getElementById('filterContainer').appendChild(document.getElementById('filterForm'))">Go</button-->

        </div>
        <!--documentGroup-->
        <div data-container="Document0Panel">
            <div id="filterForm" class="f-form">
            </div>
        </div>
        <div data-container="Document1Panel">
            <div id="grid_container" style="width: 500px;"></div>
            <!--div style="margin-top: 30px;">
                <div style="float: left;">
                    Pager Settings:
                    <div id="modes">
                    </div>
                </div>
            </div-->
        </div>
        <div data-container="Document2Panel">
            Document 2 content
        </div>
        <!--bottom tabbedGroup-->
        <div data-container="ErrorListPanel">
            List of errors
        </div>
        <div data-container="DetailsPanel">
            <div id="form" style="position:absolute; left:0px; top: 0px; margin-left: 10px;"></div>
        </div>
        <!--right tabbedGroup-->
        <div data-container="SolutionExplorerPanel">
            <div id="solutionExplorerTree" style="border: none;">
            </div>
        </div>
        <div data-container="PropertiesPanel">
            List of properties
        </div>
    </div>


    @section Scripts {
        @Scripts.Render("~/dist/jstree.js")
        @Scripts.Render("~/dist/lantree.js")
        @Scripts.Render("~/dist/vue_filter.js")
        @Scripts.Render("~/jqwidgets/jqxcore.js")
        @Scripts.Render("~/jqwidgets/jqxribbon.js")
        @Scripts.Render("~/jqwidgets/jqxlayout.js")
        @Scripts.Render("~/jqwidgets/jqxdata.js")
        @Scripts.Render("~/jqwidgets/jqxbuttons.js")
        @Scripts.Render("~/jqwidgets/jqxscrollbar.js")
        @Scripts.Render("~/jqwidgets/jqxlistbox.js")
        @Scripts.Render("~/jqwidgets/jqxdropdownlist.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.pager.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.selection.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.columnsresize.js")
        @Scripts.Render("~/jqwidgets/jqxmenu.js")
        @Scripts.Render("~/scripts/demos.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.sort.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.filter.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.storage.js")
        @Scripts.Render("~/jqwidgets/jqxgrid.columnsreorder.js")
        @Scripts.Render("~/jqwidgets/jqxpanel.js")
        @Scripts.Render("~/jqwidgets/jqxcheckbox.js")

    }

</body>
</html>